/*
* generated by Xtext
*/
grammar InternalPBS;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.lowcoupling.mdpm.lng.pbs.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.lowcoupling.mdpm.lng.pbs.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.lowcoupling.mdpm.lng.pbs.services.PBSGrammarAccess;

}

@parser::members {

 	private PBSGrammarAccess grammarAccess;
 	
    public InternalPBSParser(TokenStream input, PBSGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "PBS";	
   	}
   	
   	@Override
   	protected PBSGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePBS
entryRulePBS returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPBSRule()); }
	 iv_rulePBS=rulePBS 
	 { $current=$iv_rulePBS.current; } 
	 EOF 
;

// Rule PBS
rulePBS returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getPBSAccess().getProductParserRuleCall()); 
    }
    this_Product_0=ruleProduct
    { 
        $current = $this_Product_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleProduct
entryRuleProduct returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProductRule()); }
	 iv_ruleProduct=ruleProduct 
	 { $current=$iv_ruleProduct.current; } 
	 EOF 
;

// Rule Product
ruleProduct returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_description_0_0=RULE_ML_COMMENT
		{
			newLeafNode(lv_description_0_0, grammarAccess.getProductAccess().getDescriptionML_COMMENTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProductRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_0_0, 
        		"ML_COMMENT");
	    }

)
)?	otherlv_1='Product ' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProductAccess().getProductKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getProductAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProductRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)this_OPENCURLY_3=RULE_OPENCURLY
    { 
    newLeafNode(this_OPENCURLY_3, grammarAccess.getProductAccess().getOPENCURLYTerminalRuleCall_3()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProductAccess().getPartsPartParserRuleCall_4_0()); 
	    }
		lv_parts_4_0=rulePart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProductRule());
	        }
       		add(
       			$current, 
       			"parts",
        		lv_parts_4_0, 
        		"Part");
	        afterParserOrEnumRuleCall();
	    }

)
)*this_CLOSEDCURLY_5=RULE_CLOSEDCURLY
    { 
    newLeafNode(this_CLOSEDCURLY_5, grammarAccess.getProductAccess().getCLOSEDCURLYTerminalRuleCall_5()); 
    }
)
;





// Entry rule entryRulePart
entryRulePart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPartRule()); }
	 iv_rulePart=rulePart 
	 { $current=$iv_rulePart.current; } 
	 EOF 
;

// Rule Part
rulePart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_description_0_0=RULE_ML_COMMENT
		{
			newLeafNode(lv_description_0_0, grammarAccess.getPartAccess().getDescriptionML_COMMENTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPartRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_0_0, 
        		"ML_COMMENT");
	    }

)
)?	otherlv_1='Part ' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPartAccess().getPartKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getPartAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPartRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)((this_OPENCURLY_3=RULE_OPENCURLY
    { 
    newLeafNode(this_OPENCURLY_3, grammarAccess.getPartAccess().getOPENCURLYTerminalRuleCall_3_0_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPartAccess().getPartsPartParserRuleCall_3_0_1_0()); 
	    }
		lv_parts_4_0=rulePart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPartRule());
	        }
       		add(
       			$current, 
       			"parts",
        		lv_parts_4_0, 
        		"Part");
	        afterParserOrEnumRuleCall();
	    }

)
)*this_CLOSEDCURLY_5=RULE_CLOSEDCURLY
    { 
    newLeafNode(this_CLOSEDCURLY_5, grammarAccess.getPartAccess().getCLOSEDCURLYTerminalRuleCall_3_0_2()); 
    }
)
    |this_ENDLINE_6=RULE_ENDLINE
    { 
    newLeafNode(this_ENDLINE_6, grammarAccess.getPartAccess().getENDLINETerminalRuleCall_3_1()); 
    }
))
;





RULE_ENDLINE : ';';

RULE_OPENCURLY : '{';

RULE_CLOSEDCURLY : '}';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


