/*
* generated by Xtext
*/
package com.lowcoupling.mdpm.lng.pbs.services;

import java.util.List;

import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

import com.google.inject.Inject;
import com.google.inject.Singleton;

@Singleton
public class PBSGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PBSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PBS");
		private final RuleCall cProductParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PBS:
		//
		//	Product;
		public ParserRule getRule() { return rule; }

		//Product
		public RuleCall getProductParserRuleCall() { return cProductParserRuleCall; }
	}

	public class ProductElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Product");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionML_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Keyword cProductKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cOPENCURLYTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cPartsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPartsPartParserRuleCall_4_0 = (RuleCall)cPartsAssignment_4.eContents().get(0);
		private final RuleCall cCLOSEDCURLYTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Product:
		//
		//	description=ML_COMMENT? "Product " name=ID OPENCURLY parts+=Part* CLOSEDCURLY;
		public ParserRule getRule() { return rule; }

		//description=ML_COMMENT? "Product " name=ID OPENCURLY parts+=Part* CLOSEDCURLY
		public Group getGroup() { return cGroup; }

		//description=ML_COMMENT?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }

		//ML_COMMENT
		public RuleCall getDescriptionML_COMMENTTerminalRuleCall_0_0() { return cDescriptionML_COMMENTTerminalRuleCall_0_0; }

		//"Product "
		public Keyword getProductKeyword_1() { return cProductKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//OPENCURLY
		public RuleCall getOPENCURLYTerminalRuleCall_3() { return cOPENCURLYTerminalRuleCall_3; }

		//parts+=Part*
		public Assignment getPartsAssignment_4() { return cPartsAssignment_4; }

		//Part
		public RuleCall getPartsPartParserRuleCall_4_0() { return cPartsPartParserRuleCall_4_0; }

		//CLOSEDCURLY
		public RuleCall getCLOSEDCURLYTerminalRuleCall_5() { return cCLOSEDCURLYTerminalRuleCall_5; }
	}

	public class PartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionML_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Keyword cPartKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final RuleCall cOPENCURLYTerminalRuleCall_3_0_0 = (RuleCall)cGroup_3_0.eContents().get(0);
		private final Assignment cPartsAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cPartsPartParserRuleCall_3_0_1_0 = (RuleCall)cPartsAssignment_3_0_1.eContents().get(0);
		private final RuleCall cCLOSEDCURLYTerminalRuleCall_3_0_2 = (RuleCall)cGroup_3_0.eContents().get(2);
		private final RuleCall cENDLINETerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//Part:
		//
		//	description=ML_COMMENT? "Part " name=ID (OPENCURLY parts+=Part* CLOSEDCURLY | ENDLINE);
		public ParserRule getRule() { return rule; }

		//description=ML_COMMENT? "Part " name=ID (OPENCURLY parts+=Part* CLOSEDCURLY | ENDLINE)
		public Group getGroup() { return cGroup; }

		//description=ML_COMMENT?
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }

		//ML_COMMENT
		public RuleCall getDescriptionML_COMMENTTerminalRuleCall_0_0() { return cDescriptionML_COMMENTTerminalRuleCall_0_0; }

		//"Part "
		public Keyword getPartKeyword_1() { return cPartKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//OPENCURLY parts+=Part* CLOSEDCURLY | ENDLINE
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//OPENCURLY parts+=Part* CLOSEDCURLY
		public Group getGroup_3_0() { return cGroup_3_0; }

		//OPENCURLY
		public RuleCall getOPENCURLYTerminalRuleCall_3_0_0() { return cOPENCURLYTerminalRuleCall_3_0_0; }

		//parts+=Part*
		public Assignment getPartsAssignment_3_0_1() { return cPartsAssignment_3_0_1; }

		//Part
		public RuleCall getPartsPartParserRuleCall_3_0_1_0() { return cPartsPartParserRuleCall_3_0_1_0; }

		//CLOSEDCURLY
		public RuleCall getCLOSEDCURLYTerminalRuleCall_3_0_2() { return cCLOSEDCURLYTerminalRuleCall_3_0_2; }

		//ENDLINE
		public RuleCall getENDLINETerminalRuleCall_3_1() { return cENDLINETerminalRuleCall_3_1; }
	}
	
	
	private PBSElements pPBS;
	private ProductElements pProduct;
	private PartElements pPart;
	private TerminalRule tENDLINE;
	private TerminalRule tOPENCURLY;
	private TerminalRule tCLOSEDCURLY;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public PBSGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.lowcoupling.mdpm.lng.pbs.PBS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PBS:
	//
	//	Product;
	public PBSElements getPBSAccess() {
		return (pPBS != null) ? pPBS : (pPBS = new PBSElements());
	}
	
	public ParserRule getPBSRule() {
		return getPBSAccess().getRule();
	}

	//Product:
	//
	//	description=ML_COMMENT? "Product " name=ID OPENCURLY parts+=Part* CLOSEDCURLY;
	public ProductElements getProductAccess() {
		return (pProduct != null) ? pProduct : (pProduct = new ProductElements());
	}
	
	public ParserRule getProductRule() {
		return getProductAccess().getRule();
	}

	//Part:
	//
	//	description=ML_COMMENT? "Part " name=ID (OPENCURLY parts+=Part* CLOSEDCURLY | ENDLINE);
	public PartElements getPartAccess() {
		return (pPart != null) ? pPart : (pPart = new PartElements());
	}
	
	public ParserRule getPartRule() {
		return getPartAccess().getRule();
	}

	//terminal ENDLINE:
	//
	//	";";
	public TerminalRule getENDLINERule() {
		return (tENDLINE != null) ? tENDLINE : (tENDLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ENDLINE"));
	} 

	//terminal OPENCURLY:
	//
	//	"{";
	public TerminalRule getOPENCURLYRule() {
		return (tOPENCURLY != null) ? tOPENCURLY : (tOPENCURLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OPENCURLY"));
	} 

	//terminal CLOSEDCURLY:
	//
	//	"}";
	public TerminalRule getCLOSEDCURLYRule() {
		return (tCLOSEDCURLY != null) ? tCLOSEDCURLY : (tCLOSEDCURLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CLOSEDCURLY"));
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
