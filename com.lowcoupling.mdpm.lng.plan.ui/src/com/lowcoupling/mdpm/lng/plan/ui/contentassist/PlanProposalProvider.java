/*
* generated by Xtext
*/
package com.lowcoupling.mdpm.lng.plan.ui.contentassist;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.RowLayout;
import org.eclipse.swt.widgets.DateTime;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.ui.editor.contentassist.ReplacementTextApplier;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class PlanProposalProvider extends AbstractPlanProposalProvider  {

	class DateSelectionAdapter extends SelectionAdapter{
		public String dateString;
		public DateTime calendar;
		private Shell shell;
		public DateSelectionAdapter(DateTime _calendar, Shell _shell){
			calendar =_calendar;
			shell = _shell;
		}
		public void widgetSelected (SelectionEvent e) {
			
			dateString = "'"+calendar.getDay()+"/"+(calendar.getMonth()+1)+"/"+calendar.getYear()+"'";
			shell.dispose();
		}
	}
	@Override
	  protected ConfigurableCompletionProposal doCreateProposal(String proposal,
			StyledString displayString, Image image, int priority,
			ContentAssistContext context) {
		ConfigurableCompletionProposal theproposal = super
						.doCreateProposal(proposal, displayString, image, priority, context);
//		System.out.println("doCreateProposal "+proposal+context.getSelectedText());
//			if(proposal.equals("Activity Template")){
//				theproposal.setAdditionalProposalInfo(
//						"Activity activityname {\n"+
//				    	"\t\t//involves Resource;\n"+
//				    	"\t\tstarts '2/01/2013';\n"+
//				    	"\t\tduration 10;\n"+
//				    	"\t\t//ends '15/01/2013';\n"+
//				    	"\t\tdescription '';\n" +
//				    	"\t\tcompleteness 0%;\n"+
//				    	"\t}"
//						);
//			}
		
		return theproposal;
	  }

	@Override
	public void complete_ActivityElement(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		ConfigurableCompletionProposal activityTemplate = (ConfigurableCompletionProposal) createCompletionProposal("Activity Template",  
			      context);  
		if (activityTemplate != null) {  
			activityTemplate.setTextApplier(  
				      new ReplacementTextApplier() {  
				      @Override  
				      public String getActualReplacementString(
				    		  ConfigurableCompletionProposal proposal) { 
				    	Calendar start = GregorianCalendar.getInstance();
				  		DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
				  		String startString = formatter.format(start.getTime());
				    	  return  "Activity activityname {\n"+
				    			  "\t\tstarts '"+startString+"';\n"+
				    			  "\t\tduration 10;\n"+
				    			  "\t\tcompleteness 0%;\n"+
				    			  "\t}";
				    	  		}
				      }
				      );
			 acceptor.accept(activityTemplate);	 
		}
	}
	
	@Override
	public void completeActivity_Start(EObject model, Assignment assignment, final ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		//completeRuleCall(((RuleCall)assignment.getTerminal()), context, acceptor);
		  ConfigurableCompletionProposal pickColor = (ConfigurableCompletionProposal) createCompletionProposal("Pick a date...",  
				      context);  
		  if (pickColor != null) {  
				    pickColor.setTextApplier(  
				      new ReplacementTextApplier() {  
				      @Override  
				      public String getActualReplacementString(  
				        ConfigurableCompletionProposal proposal) { 
				    	  Display display = context.getViewer().getTextWidget().getDisplay();
				    	  Shell ns = new Shell(display);
				    	  ns.setLayout (new RowLayout ());
				    	  final DateTime calendar = new DateTime (ns, SWT.CALENDAR);
				    	  DateSelectionAdapter ds = new DateSelectionAdapter (calendar,ns); 
				    	  
				    	  calendar.addSelectionListener (ds);
				    	  ns.pack();
				    	  ns.open();
				    	  while (!ns.isDisposed()) {
				    	      if (!display.readAndDispatch())
				    	        display.sleep();
				    	   }
				    	  return ds.dateString;
					  		
				    	  }
				      
				      });
				    acceptor.accept(pickColor);	    
		  }
	}
	
	@Override
	public void completeActivity_End(EObject model, Assignment assignment, final ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		//completeRuleCall(((RuleCall)assignment.getTerminal()), context, acceptor);
		  ConfigurableCompletionProposal pickColor = (ConfigurableCompletionProposal) createCompletionProposal("Pick a date...",  
				      context);  
		  if (pickColor != null) {  
				    pickColor.setTextApplier(  
				      new ReplacementTextApplier() {  
				      @Override  
				      public String getActualReplacementString(  
				        ConfigurableCompletionProposal proposal) { 
				    	  Display display = context.getViewer().getTextWidget().getDisplay();
				    	  Shell ns = new Shell(display);
				    	  ns.setLayout (new RowLayout ());
				    	  final DateTime calendar = new DateTime (ns, SWT.CALENDAR);
				    	  DateSelectionAdapter ds = new DateSelectionAdapter (calendar,ns); 
				    	  calendar.addSelectionListener (ds);
				    	  ns.pack();
				    	  ns.open();
				    	  while (!ns.isDisposed()) {
				    	      if (!display.readAndDispatch())
				    	        display.sleep();
				    	   }
				    	  return ds.dateString;
					  		
				    	  }
				      
				      });
				    acceptor.accept(pickColor);	    
		  }
	}
		  
	@Override
	public void completeCheckPoint_End(EObject model, Assignment assignment, final ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		//completeRuleCall(((RuleCall)assignment.getTerminal()), context, acceptor);
		  ConfigurableCompletionProposal pickColor = (ConfigurableCompletionProposal) createCompletionProposal("Pick a date...",  
				      context);  
		  if (pickColor != null) {  
				    pickColor.setTextApplier(  
				      new ReplacementTextApplier() {  
				      @Override  
				      public String getActualReplacementString(  
				        ConfigurableCompletionProposal proposal) { 
				    	  Display display = context.getViewer().getTextWidget().getDisplay();
				    	  Shell ns = new Shell(display);
				    	  ns.setLayout (new RowLayout ());
				    	  final DateTime calendar = new DateTime (ns, SWT.CALENDAR);
				    	  DateSelectionAdapter ds = new DateSelectionAdapter (calendar,ns); 
				    	  calendar.addSelectionListener (ds);
				    	  ns.pack();
				    	  ns.open();
				    	  while (!ns.isDisposed()) {
				    	      if (!display.readAndDispatch())
				    	        display.sleep();
				    	   }
				    	  return ds.dateString;
					  		
				    	  }
				      
				      });
				    acceptor.accept(pickColor);	    
		  }
	}
		 
}

