/*
 * generated by Xtext
 */
package com.lowcoupling.mdpm.lng.plan.formatting;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;

import com.lowcoupling.mdpm.lng.plan.services.PlanGrammarAccess;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class PlanFormatter extends AbstractDeclarativeFormatter {
	
	@Override
	protected void configureFormatting(FormattingConfig c) {
// It's usually a good idea to activate the following three statements.
// They will add and preserve newlines around comments
		
		//c.setLinewrap(0, 1, 2).before(((PlanGrammarAccess) getGrammarAccess()).getML_COMMENTRule());
		//c.setLinewrap(0, 1, 1).after(((PlanGrammarAccess) getGrammarAccess()).getML_COMMENTRule());
		//c.setLinewrap(0, 1, 1).after(((PlanGrammarAccess) getGrammarAccess()).getOPENCURLYRule());
		c.setLinewrap().after( (EObject) ((PlanGrammarAccess) getGrammarAccess()).getENDLINERule());
		c.setLinewrap().after( (EObject) ((PlanGrammarAccess) getGrammarAccess()).getOPENCURLYRule());
		c.setIndentationIncrement().after(((PlanGrammarAccess) getGrammarAccess()).getOPENCURLYRule());
		
	
		c.setLinewrap().before( (EObject) ((PlanGrammarAccess) getGrammarAccess()).getSL_COMMENTRule());
		//c.setLinewrap().around( (EObject) ((PlanGrammarAccess) getGrammarAccess()).getML_COMMENTRule());
		
		
		c.setIndentationDecrement().before(((PlanGrammarAccess) getGrammarAccess()).getCLOSEDCURLYRule());
		c.setLinewrap(2).after(((PlanGrammarAccess) getGrammarAccess()).getCLOSEDCURLYRule());
	}
}
