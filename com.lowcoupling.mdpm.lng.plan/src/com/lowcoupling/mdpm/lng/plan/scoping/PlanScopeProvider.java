/*
 * generated by Xtext
 */
package com.lowcoupling.mdpm.lng.plan.scoping;

import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

public class PlanScopeProvider extends AbstractDeclarativeScopeProvider {

//	public IScope getScope (EObject context, EReference reference) {
////		if (reference.getName().equals("dependencies")){
////			EObject parent = context.eContainer();
////			while ((parent!=null) && !(parent instanceof Plans)){
////				parent = parent.eContainer();
////			}
////			if(parent !=null && (parent instanceof Plans)){
////				Plans plans = (Plans)parent;
////				Iterator<Plan> planIt = plans.getPlan().iterator();
////				List<EObject> activities = new ArrayList<EObject>();
////				while(planIt.hasNext()){
////					Plan plan = planIt.next();
////					activities.addAll(plan.getActivities());
////				}
////				return  org.eclipse.xtext.scoping.Scopes.scopeFor(activities);
////
////			}
////		}
//
//		return super.getScope(context, reference);
//	}

}
