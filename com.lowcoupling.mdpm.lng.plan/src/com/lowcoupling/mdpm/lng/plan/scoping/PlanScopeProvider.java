/*
 * generated by Xtext
 */
package com.lowcoupling.mdpm.lng.plan.scoping;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.naming.DefaultDeclarativeQualifiedNameProvider;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import com.lowcoupling.mdpm.lng.plan.plan.Project;
import com.lowcoupling.mdpm.lng.wbs.wBS.WBSDeliverable;
import com.lowcoupling.mdpm.lng.wbs.wBS.WBSNode;
import com.lowcoupling.mdpm.lng.wbs.wBS.WBSProject;

public class PlanScopeProvider extends AbstractDeclarativeScopeProvider {
	public IScope getScope (EObject context, EReference reference) {
		if(reference.getName().equals("wbsActivity")){
			EObject parent = context.eContainer();
			while ((parent!=null) && !(parent instanceof Project)){
				parent = parent.eContainer();
			}
			if(parent !=null && (parent instanceof Project)){
				Project project = (Project)parent;
				WBSProject wbsProject = project.getWbsProject();

				Iterator<EObject> nodes = wbsProject.eAllContents();
				List<EObject> activities = new ArrayList<EObject>();
				while(nodes.hasNext()){
					EObject node = nodes.next();
					if(!(node instanceof WBSDeliverable)){
						activities.add(node);
					}
				}
				DefaultDeclarativeQualifiedNameProvider nameP = new DefaultDeclarativeQualifiedNameProvider();
				return  org.eclipse.xtext.scoping.Scopes.scopeFor(activities, nameP, IScope.NULLSCOPE);
			}

			
		}
		return super.getScope(context, reference);
	}
	//	public IScope getScope (EObject context, EReference reference) {
	////		if (reference.getName().equals("dependencies")){
	////			EObject parent = context.eContainer();
	////			while ((parent!=null) && !(parent instanceof Plans)){
	////				parent = parent.eContainer();
	////			}
	////			if(parent !=null && (parent instanceof Plans)){
	////				Plans plans = (Plans)parent;
	////				Iterator<Plan> planIt = plans.getPlan().iterator();
	////				List<EObject> activities = new ArrayList<EObject>();
	////				while(planIt.hasNext()){
	////					Plan plan = planIt.next();
	////					activities.addAll(plan.getActivities());
	////				}
	////				return  org.eclipse.xtext.scoping.Scopes.scopeFor(activities);
	////
	////			}
	////		}
	//
	//		return super.getScope(context, reference);
	//	}

}
