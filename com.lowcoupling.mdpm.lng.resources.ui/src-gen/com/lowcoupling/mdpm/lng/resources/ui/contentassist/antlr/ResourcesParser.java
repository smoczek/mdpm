/*
* generated by Xtext
*/
package com.lowcoupling.mdpm.lng.resources.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.lowcoupling.mdpm.lng.resources.services.ResourcesGrammarAccess;

public class ResourcesParser extends AbstractContentAssistParser {
	
	@Inject
	private ResourcesGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.lowcoupling.mdpm.lng.resources.ui.contentassist.antlr.internal.InternalResourcesParser createParser() {
		com.lowcoupling.mdpm.lng.resources.ui.contentassist.antlr.internal.InternalResourcesParser result = new com.lowcoupling.mdpm.lng.resources.ui.contentassist.antlr.internal.InternalResourcesParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getResourcesAccess().getGroup(), "rule__Resources__Group__0");
					put(grammarAccess.getResourceGroupAccess().getGroup(), "rule__ResourceGroup__Group__0");
					put(grammarAccess.getResourceAccess().getGroup(), "rule__Resource__Group__0");
					put(grammarAccess.getResourcesAccess().getResourceGroupsAssignment_0(), "rule__Resources__ResourceGroupsAssignment_0");
					put(grammarAccess.getResourcesAccess().getResourcesAssignment_1(), "rule__Resources__ResourcesAssignment_1");
					put(grammarAccess.getResourceGroupAccess().getNameAssignment_1(), "rule__ResourceGroup__NameAssignment_1");
					put(grammarAccess.getResourceGroupAccess().getIdAssignment_4(), "rule__ResourceGroup__IdAssignment_4");
					put(grammarAccess.getResourceGroupAccess().getCostAssignment_7(), "rule__ResourceGroup__CostAssignment_7");
					put(grammarAccess.getResourceGroupAccess().getCostLabelAssignment_8(), "rule__ResourceGroup__CostLabelAssignment_8");
					put(grammarAccess.getResourceGroupAccess().getTypeAssignment_11(), "rule__ResourceGroup__TypeAssignment_11");
					put(grammarAccess.getResourceAccess().getNameAssignment_1(), "rule__Resource__NameAssignment_1");
					put(grammarAccess.getResourceAccess().getTypeAssignment_4(), "rule__Resource__TypeAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.lowcoupling.mdpm.lng.resources.ui.contentassist.antlr.internal.InternalResourcesParser typedParser = (com.lowcoupling.mdpm.lng.resources.ui.contentassist.antlr.internal.InternalResourcesParser) parser;
			typedParser.entryRuleResources();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ResourcesGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ResourcesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
