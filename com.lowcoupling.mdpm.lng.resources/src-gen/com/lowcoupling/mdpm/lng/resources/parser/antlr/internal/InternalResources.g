/*
* generated by Xtext
*/
grammar InternalResources;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.lowcoupling.mdpm.lng.resources.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.lowcoupling.mdpm.lng.resources.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.lowcoupling.mdpm.lng.resources.services.ResourcesGrammarAccess;

}

@parser::members {

 	private ResourcesGrammarAccess grammarAccess;
 	
    public InternalResourcesParser(TokenStream input, ResourcesGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Resources";	
   	}
   	
   	@Override
   	protected ResourcesGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleResources
entryRuleResources returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getResourcesRule()); }
	 iv_ruleResources=ruleResources 
	 { $current=$iv_ruleResources.current; } 
	 EOF 
;

// Rule Resources
ruleResources returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getResourcesAccess().getResourceGroupsResourceGroupParserRuleCall_0_0()); 
	    }
		lv_resourceGroups_0_0=ruleResourceGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResourcesRule());
	        }
       		add(
       			$current, 
       			"resourceGroups",
        		lv_resourceGroups_0_0, 
        		"ResourceGroup");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getResourcesAccess().getResourcesResourceParserRuleCall_1_0()); 
	    }
		lv_resources_1_0=ruleResource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResourcesRule());
	        }
       		add(
       			$current, 
       			"resources",
        		lv_resources_1_0, 
        		"Resource");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleResourceGroup
entryRuleResourceGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getResourceGroupRule()); }
	 iv_ruleResourceGroup=ruleResourceGroup 
	 { $current=$iv_ruleResourceGroup.current; } 
	 EOF 
;

// Rule ResourceGroup
ruleResourceGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Group' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getResourceGroupAccess().getGroupKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getResourceGroupAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getResourceGroupRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getResourceGroupAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='id' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getResourceGroupAccess().getIdKeyword_3());
    }
(
(
		lv_id_4_0=RULE_ID
		{
			newLeafNode(lv_id_4_0, grammarAccess.getResourceGroupAccess().getIdIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getResourceGroupRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_4_0, 
        		"ID");
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getResourceGroupAccess().getSemicolonKeyword_5());
    }
	otherlv_6='cost' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getResourceGroupAccess().getCostKeyword_6());
    }
(
(
		lv_cost_7_0=RULE_INT
		{
			newLeafNode(lv_cost_7_0, grammarAccess.getResourceGroupAccess().getCostINTTerminalRuleCall_7_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getResourceGroupRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"cost",
        		lv_cost_7_0, 
        		"INT");
	    }

)
)(
(
		lv_costLabel_8_0=RULE_STRING
		{
			newLeafNode(lv_costLabel_8_0, grammarAccess.getResourceGroupAccess().getCostLabelSTRINGTerminalRuleCall_8_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getResourceGroupRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"costLabel",
        		lv_costLabel_8_0, 
        		"STRING");
	    }

)
)?	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getResourceGroupAccess().getSemicolonKeyword_9());
    }
	otherlv_10='type' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getResourceGroupAccess().getTypeKeyword_10());
    }
(
(
		lv_type_11_0=RULE_STRING
		{
			newLeafNode(lv_type_11_0, grammarAccess.getResourceGroupAccess().getTypeSTRINGTerminalRuleCall_11_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getResourceGroupRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_11_0, 
        		"STRING");
	    }

)
)	otherlv_12=';' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getResourceGroupAccess().getSemicolonKeyword_12());
    }
	otherlv_13='}' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getResourceGroupAccess().getRightCurlyBracketKeyword_13());
    }
)
;





// Entry rule entryRuleResource
entryRuleResource returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getResourceRule()); }
	 iv_ruleResource=ruleResource 
	 { $current=$iv_ruleResource.current; } 
	 EOF 
;

// Rule Resource
ruleResource returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Resource' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getResourceAccess().getResourceKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getResourceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getResourceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getResourceAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='type' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getResourceAccess().getTypeKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getResourceRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getResourceAccess().getTypeResourceGroupCrossReference_4_0()); 
	}

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getResourceAccess().getSemicolonKeyword_5());
    }
	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getResourceAccess().getRightCurlyBracketKeyword_6());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


